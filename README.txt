Solution for MarsRovers Problem:
by Louis Guerra

	~Design~

3 Files

-The Rover class has 3 variables: x position, y position, and orientation. It also has methods to return these values, and
methods to alter these values in response to commands. 

-The RoverHistory class has a 2D array that will hold c entries. Each of the c entries has 2n+1 columns, where n is the
number of rovers. The columns correspond to (time, x1, y1, x2, y2, ...., xn, yn). The constructor for this class
initiliazes the 2D array to have c rows*, with the first row being the initial positions. This class has 2 methods: a log
method that adds an entry to the 2D array everytime a Rover changes position, and a write method that prints the array to
a file, RoverHistory.txt. Note that these last 2 methods are only called if the user opts to use the history log (see
execution sections). 

	*Note that the number of rows, c, is one more than the number of M commands in all of our strings. This is because we add
	an entry only after every M command, and we need need 1 more than that for the initial state.

-The MarsRovers class is the meat of our simulation. The main method by default runs by taking input from input.txt and
does NOT use the RoverHistory methods. The user can change these settings by using command line arguments (see exectuion
section). 

The main method calls an aux method to parse the input information. It keeps instance variable to keep track of the size
of the plateau, the number of rovers, and loads information into 2 arrays: the first array, rovers, will hold all of the
Rover objects, while the second, commands, will hold all of the command strings. 

Once all of the parsing is out of the way, we run two loops. For each rover, we iterate through its corresponding command
string. For each command we call the appropriate Rover method to rotate or move the rover. After every command, we
increment our time unit t. After every M command (and immediately after the Rovers are initialized actually), we run two
methods, checkBoundaries and checkCollisions, to see if we have an illegal state. Also, if the user opted to use the
history logger, we log an entry after every M command (but not after rotate commands).

After we've gone through all the commands, we can print the final positions and orientations of the rovers. However, 
if there was a mistake and we've had a collision, or if a rover has fallen off the plateau, we let our user know 
and direct them to the history log to troubleshoot. 

	~Execution~

place all 3 files, MarsRovers.java, Rover.java, and RoverHistory.java in the same directory with input.txt. 
after compilation, run with:

java MarsRover

The file can also be executed with 2 optional parameters:

java MarsRover filename.txt h

"filename.txt" specifies an alternate input file (default is input.txt), and the "h" parameter turns on the history logger
which writes to RoverHistory.txt

Here's some information about the input file taken from the problem prompt:
	"The first line of input is the upper-right coordinates of the plateau, the lower-left coordinates are assumed to be 0
	0.

	The rest of the input is information pertaining to the rovers that have been deployed. Each rover has two lines of 
	input. The first line gives the rover's position, and the second line is a series of instructions telling the rover
	how to explore the plateau."

	~Looking Forward~
	
As I mentioned earlier, there is alot of room to improve this simulator by adding data visualization support that would
graph the information generated by the RoverHistory class. 
I think theres also opportunity to add more helpful information to let the user know if the input.txt file was incorrectly
configured. 